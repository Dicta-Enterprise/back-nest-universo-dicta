// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum EstadoGenerico {
  ACTIVO
  INACTIVO
  PENDIENTE
  ELIMINADO
  DESHABILITADO
}

enum EstadoPayment {
  PENDIENTE
  APROBADO
  RECHAZADO
  CANCELADO
  DEVUELTO
  REEMBOLSADO
  FALLIDO
  COMPLETADO
  EN_PROCESO
  EN_ESPERA
  ENVIADO
  ENTREGADO
  RECIBIDO
  EN_REVISION
  EN_VERIFICACION
  VERIFICADO
  NO_VERIFICADO
  ACEPTADO
  PAGADO
  NO_PAGADO
  PENDIENTE_PAGO
  PENDIENTE_APROBACION
  PENDIENTE_ENVIO
  PENDIENTE_ENTREGA
  PENDIENTE_VERIFICACION
  PENDIENTE_REVISION
  PENDIENTE_VERIFICACION_PAGO
}

enum TipoUsuario {
  ADMIN
  CLIENTE
  TRABAJADOR
  DESARROLLADOR
}

model Categoria {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  nombre             String    @unique
  descripcion        String

  estado             Boolean   @default(true)
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  cursos             Curso[]
  galaxias           Galaxia[]
  galaxiaId          String[]  @db.ObjectId
   // Campos extra para la visualización tipo cohetes
  x                  Float?    // posición horizontal
  y                  Float?    // posición vertical
  z                  Float?    // profundidad
  url                String?   // ruta amigable
  modelo             String?   // ruta del modelo 3D
}

model Idioma {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  estado Boolean @default(true)
  nombre String  @unique
  cursos Curso[]
}

model Profesor {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  nombre           String
  dni              String? @unique
  apellido_paterno String?
  apellido_materno String?
  email            String  @unique
  estado_p         Boolean @default(true)
  cursos           Curso[]

  @@unique([apellido_paterno, apellido_materno])
}

model Planeta {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  grupo             String
  nombre             String         @unique
  estado             EstadoGenerico @default(ACTIVO)
  tema               String
  textura         String
  url                String
  info               InfoPlaneta?    // <-- tipo embebido
  fechaCreacion      DateTime       @default(now())
  fechaActualizacion DateTime       @updatedAt
  galaxia            Galaxia       @relation(fields: [galaxiaId], references: [id])
  galaxiaId          String        @db.ObjectId
  cursos             Curso[]
  
}
type InfoPlaneta {
  tipoRiesgo   String
  tamano       String   
  composicion  String   
  riesgo       String
  nivel        String
  ambiente     String
  temperatura  String
  villano      String
}


model Curso {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  nombre          String    @unique
  descripcion     String
  fechaCreacion   DateTime  @default(now())
  fechaInicio     DateTime?
  fechaFinal      DateTime?
  precio          Float
  estado          Boolean   @default(true)
  imagen          String    @unique
  duracionSemanas Float?

  profesor    Profesor?  @relation(fields: [profesorId], references: [id])
  profesorId  String?    @db.ObjectId
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  categoriaId String?    @db.ObjectId
  idioma      Idioma?    @relation(fields: [idiomaId], references: [id])
  idiomaId    String?    @db.ObjectId
  planeta     Planeta?   @relation(fields: [planetaId], references: [id])
  planetaId   String?    @db.ObjectId
}

model Galaxia {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  nombre             String
  descripcion        String
  estado             Boolean   @default(true)
  imagen             String?
  url                String?
  textura            String?
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  planetas           Planeta[]
  categoria          Categoria @relation(fields: [categoriaId], references: [id])
  categoriaId        String    @db.ObjectId
  // atributos          Atributo[]
   color    String
   posicion           Vector3?
   rotacion           Vector3?
}
// Tipos embebidos
type Vector3 {
  x  Float
  y  Float
  z  Float
}
type Atributo {
  posicion Posicion?
  colores  Color[]
}
type Posicion {
  x Int
  y Int
}

type Color {
  type  String
  value String
}

// model ItemImagenGalaxia {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   imagenUrl String
//   galaxia   Galaxia @relation(fields: [galaxiaId], references: [id])
//   galaxiaId String  @db.ObjectId
// }

model LandingPage {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  titulo              String             @unique
  descripcion         String
  imagenPrincipal     String
  contenido           String[]
  estado              Boolean            @default(true)
  slug                String @unique
  metaKeywords        String
  landingUrl          String
  fechaCreacion       DateTime           @default(now())
  fechaActualizacion  DateTime           @updatedAt
  itemImagenesLanding ItemImagenLading[]
  itemColores         ItemColores[]
}

model ItemImagenLading {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  imagenUrl     String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  landingPageId String      @db.ObjectId
}

model ItemColores {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  color         String
  landingPage   LandingPage @relation(fields: [landingPageId], references: [id])
  landingPageId String      @db.ObjectId
}
